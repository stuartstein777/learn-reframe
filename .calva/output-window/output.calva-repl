; This is the Calva evaluation results output window.
; TIPS: The keyboard shortcut `ctrl+alt+c o` shows and focuses this window
;   when connected to a REPL session.
; Please see https://calva.io/output/ for more info.
; Happy coding! ♥️

; Connecting ...
; Hooking up nREPL sessions...
; Connected session: clj
; TIPS: 
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉shadow.user꞉>  ; Use `alt+enter` to evaluate
; Creating cljs repl session...
; Connecting cljs repl: shadow-cljs...
;   The Calva Connection Log might have more connection progress information.
; Connected session: cljs, repl: :app
; TIPS: You can choose which REPL to use (clj or cljs):
;    *Calva: Toggle REPL connection*
;    (There is a button in the status bar for this)
nil
cljs꞉exfn.app꞉>  ; Use `alt+enter` to evaluate
nil
cljs꞉exfn.app꞉> 
nil
cljs꞉exfn.app꞉> 
#object[G__29388]
cljs꞉exfn.app꞉> 
11
cljs꞉exfn.app꞉> 
(8 11 14 17 20)
cljs꞉exfn.app꞉> 
nil
; 
; Execution error (Error) at (<cljs repl>:1).
function cljs$core$_PLUS_(var_args){
var G__25638 = arguments.length;
switch (G__25638) {
case 0:
return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$0();

break;
case 1:
return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

break;
case 2:
return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
default:
var args_arr__4757__auto__ = [];
var len__4736__auto___28815 = arguments.length;
var i__4737__auto___28816 = (0);
while(true){
if((i__4737__auto___28816 < len__4736__auto___28815)){
args_arr__4757__auto__.push((arguments[i__4737__auto___28816]));

var G__28817 = (i__4737__auto___28816 + (1));
i__4737__auto___28816 = G__28817;
continue;
} else {
}
break;
}

var argseq__4758__auto__ = (new cljs.core.IndexedSeq(args_arr__4757__auto__.slice((2)),(0),null));
return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4758__auto__);

}
} is not ISeqable
cljs꞉exfn.app꞉> 
nil
; 
; Execution error (Error) at (<cljs repl>:1).
function cljs$core$_PLUS_(var_args){
var G__25638 = arguments.length;
switch (G__25638) {
case 0:
return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$0();

break;
case 1:
return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

break;
case 2:
return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
default:
var args_arr__4757__auto__ = [];
var len__4736__auto___28815 = arguments.length;
var i__4737__auto___28816 = (0);
while(true){
if((i__4737__auto___28816 < len__4736__auto___28815)){
args_arr__4757__auto__.push((arguments[i__4737__auto___28816]));

var G__28817 = (i__4737__auto___28816 + (1));
i__4737__auto___28816 = G__28817;
continue;
} else {
}
break;
}

var argseq__4758__auto__ = (new cljs.core.IndexedSeq(args_arr__4757__auto__.slice((2)),(0),null));
return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4758__auto__);

}
} is not ISeqable
cljs꞉exfn.app꞉> 
nil
; ------ WARNING - :undeclared-var -----------------------------------------------
;  Resource: <eval>:1:15
 Use of undeclared Var exfn.app/f
--------------------------------------------------------------------------------

; ------ WARNING - :undeclared-var -----------------------------------------------
;  Resource: <eval>:1:20
 Use of undeclared Var exfn.app/xs
--------------------------------------------------------------------------------

cljs꞉exfn.app꞉> 
nil
; 
; Execution error (Error) at (<cljs repl>:1).
function cljs$core$_PLUS_(var_args){
var G__25638 = arguments.length;
switch (G__25638) {
case 0:
return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$0();

break;
case 1:
return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

break;
case 2:
return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
default:
var args_arr__4757__auto__ = [];
var len__4736__auto___28815 = arguments.length;
var i__4737__auto___28816 = (0);
while(true){
if((i__4737__auto___28816 < len__4736__auto___28815)){
args_arr__4757__auto__.push((arguments[i__4737__auto___28816]));

var G__28817 = (i__4737__auto___28816 + (1));
i__4737__auto___28816 = G__28817;
continue;
} else {
}
break;
}

var argseq__4758__auto__ = (new cljs.core.IndexedSeq(args_arr__4757__auto__.slice((2)),(0),null));
return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4758__auto__);

}
} is not ISeqable
cljs꞉exfn.app꞉> 
nil
; 
; Execution error (Error) at (<cljs repl>:1).
function cljs$core$_PLUS_(var_args){
var G__25638 = arguments.length;
switch (G__25638) {
case 0:
return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$0();

break;
case 1:
return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

break;
case 2:
return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
default:
var args_arr__4757__auto__ = [];
var len__4736__auto___28815 = arguments.length;
var i__4737__auto___28816 = (0);
while(true){
if((i__4737__auto___28816 < len__4736__auto___28815)){
args_arr__4757__auto__.push((arguments[i__4737__auto___28816]));

var G__28817 = (i__4737__auto___28816 + (1));
i__4737__auto___28816 = G__28817;
continue;
} else {
}
break;
}

var argseq__4758__auto__ = (new cljs.core.IndexedSeq(args_arr__4757__auto__.slice((2)),(0),null));
return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4758__auto__);

}
} is not ISeqable
cljs꞉exfn.app꞉> 
nil
; 
; Execution error (Error) at (<cljs repl>:1).
function cljs$core$_PLUS_(var_args){
var G__25638 = arguments.length;
switch (G__25638) {
case 0:
return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$0();

break;
case 1:
return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

break;
case 2:
return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
default:
var args_arr__4757__auto__ = [];
var len__4736__auto___28815 = arguments.length;
var i__4737__auto___28816 = (0);
while(true){
if((i__4737__auto___28816 < len__4736__auto___28815)){
args_arr__4757__auto__.push((arguments[i__4737__auto___28816]));

var G__28817 = (i__4737__auto___28816 + (1));
i__4737__auto___28816 = G__28817;
continue;
} else {
}
break;
}

var argseq__4758__auto__ = (new cljs.core.IndexedSeq(args_arr__4757__auto__.slice((2)),(0),null));
return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4758__auto__);

}
} is not ISeqable
cljs꞉exfn.app꞉> 
(8 11 14 17 20)
cljs꞉exfn.app꞉> 
70
cljs꞉exfn.app꞉> 
nil
; 
; Execution error (Error) at (<cljs repl>:1).
function cljs$core$_PLUS_(var_args){
var G__25638 = arguments.length;
switch (G__25638) {
case 0:
return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$0();

break;
case 1:
return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

break;
case 2:
return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
default:
var args_arr__4757__auto__ = [];
var len__4736__auto___28815 = arguments.length;
var i__4737__auto___28816 = (0);
while(true){
if((i__4737__auto___28816 < len__4736__auto___28815)){
args_arr__4757__auto__.push((arguments[i__4737__auto___28816]));

var G__28817 = (i__4737__auto___28816 + (1));
i__4737__auto___28816 = G__28817;
continue;
} else {
}
break;
}

var argseq__4758__auto__ = (new cljs.core.IndexedSeq(args_arr__4757__auto__.slice((2)),(0),null));
return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4758__auto__);

}
} is not ISeqable
cljs꞉exfn.app꞉> 
45
cljs꞉exfn.app꞉> 
45
cljs꞉exfn.app꞉> 
45
cljs꞉exfn.app꞉> 
45
cljs꞉exfn.app꞉> 
18
cljs꞉exfn.app꞉> 
18
cljs꞉exfn.app꞉> 
18
cljs꞉exfn.app꞉> 
6
cljs꞉exfn.app꞉> 
36
cljs꞉exfn.app꞉> 
("(1 2)undefined" "(2 3)undefined" "(3 4)undefined" "(4 5)undefined" "(5 6)undefined" "(6 7)undefined" "(7 8)undefined" "(8 9)undefined" "(9 10)undefined")
cljs꞉exfn.app꞉> 
("(1)undefined" "(3)undefined" "(5)undefined" "(7)undefined" "(9)undefined")
cljs꞉exfn.app꞉> 
((1) (3) (5) (7) (9))
cljs꞉exfn.app꞉> 
((1 2) (2 3) (3 4) (4 5) (5 6) (6 7) (7 8) (8 9) (9 10) (10))
cljs꞉exfn.app꞉> 
(3 5 7 9 11 13 15 17 19 10)
cljs꞉exfn.app꞉> 
